{"version":3,"sources":["features/components/map/SimpleMap.jsx","features/components/modals/ModalComponent.jsx","features/components/country/countrieslist/CountriesListItem.jsx","features/components/country/countrieslist/CountriesList.jsx","features/components/SearchBox/SearchBoxComponent.jsx","features/components/country/countryDashboard/CountryDashboard.jsx","app/App.jsx","serviceWorker.js","features/store/reducers/countriesReducer.js","features/store/index.js","index.js","features/store/actions/data/fetchCountries.js"],"names":["AnyReactComponent","Icon","name","size","color","SimpleMap","latlng","this","props","Container","style","height","width","bootstrapURLKeys","key","defaultCenter","defaultZoom","zoom","lat","lng","Component","defaultProps","center","ModalComponent","state","open","show","dimmer","setState","close","country","onClick","border","padding","cursor","Image","src","flag","Modal","basic","onClose","Header","Grid","Column","floated","Button","icon","Content","image","wrapped","Description","Label","margin","Detail","cioc","capital","population","languages","map","language","nativeName","iso639_1","iso639_2","currencies","currency","code","symbol","Actions","CountriesListItem","background","className","CountriesList","container","centered","countries","SearchBoxComponent","placeholder","handleChange","Input","type","onChange","connect","dispatch","fetchCountries","useState","search","setSearch","filteredCountries","setFilteredCountries","useEffect","filter","toLowerCase","includes","Row","alt","e","target","value","App","React","isReturningUser","localStorage","savedMode","JSON","parse","getItem","userPrefersDark","window","matchMedia","matches","getPrefColorScheme","getInitialMode","darkMode","setDarkMode","setItem","stringify","Menu","secondary","inverted","fixed","Item","position","prevMode","Boolean","location","hostname","match","FETCH_COUNTRIES","require","countriesReducer","payload","reducer","combineReducers","middlewares","thunk","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","rootEl","document","getElementById","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","fetch","res","json","log"],"mappings":"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","file":"static/js/main.2d9f76dc.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Icon, Container } from 'semantic-ui-react';\r\nimport GoogleMapReact from 'google-map-react';\r\n\r\nconst AnyReactComponent = () => <Icon name='marker' size='big' color='red' />\r\n\r\nclass SimpleMap extends Component {\r\n  static defaultProps = {\r\n    center: {\r\n      lat: 59.95,\r\n      lng: 30.33\r\n    },\r\n    zoom: 5\r\n  }; \r\n\r\n  render() {\r\n    const {latlng} = this.props;\r\n    return (\r\n      // Important! Always set the container height explicitly\r\n      <Container style={{ height: '300px', width: '800px' }}>\r\n        <GoogleMapReact\r\n          bootstrapURLKeys={{ key: 'AIzaSyDiEfRxbWN9yRKYnfYJZ0C8joch7kiej9Q' }}\r\n          defaultCenter={latlng}\r\n          defaultZoom={this.props.zoom}\r\n        >\r\n          <AnyReactComponent\r\n            lat={latlng[0]}\r\n            lng={latlng[1]}\r\n            \r\n          />\r\n        </GoogleMapReact>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SimpleMap;","import React, { Component } from \"react\";\r\nimport {\r\n  Button,\r\n  Image,\r\n  Modal,\r\n  Grid,\r\n  Segment,\r\n  Container,\r\n  Card,\r\n  Label,\r\n} from \"semantic-ui-react\";\r\nimport SimpleMap from \"../map/SimpleMap\";\r\n\r\nclass ModalComponent extends Component {\r\n  state = { open: false };\r\n\r\n  show = (dimmer) => () => this.setState({ dimmer, open: true });\r\n  close = () => this.setState({ open: false });\r\n\r\n  render() {\r\n    const { open, dimmer } = this.state;\r\n    const { country } = this.props;\r\n\r\n    return (\r\n      <div>\r\n        <button\r\n          onClick={this.show(\"blurring\")}\r\n          style={{ border: \"0\", padding: \"0\", cursor: \"pointer\" }}\r\n        >\r\n          <Image src={country.flag}></Image>\r\n        </button>\r\n\r\n        <Modal basic dimmer={dimmer} open={open} onClose={this.close}>\r\n          <Modal.Header>\r\n            <Container>\r\n              <Grid>\r\n                <Grid.Column floated=\"right\" width={1}>\r\n                  <Button color=\"red\" icon=\"close\" onClick={this.close} />\r\n                </Grid.Column>\r\n              </Grid>\r\n            </Container>\r\n          </Modal.Header>\r\n          <Modal.Content image>\r\n            <Image wrapped size=\"medium\" src={country.flag} />\r\n            <Modal.Description>\r\n              <Container>\r\n                <Grid>\r\n                  <Label color=\"teal\" style={{ margin: \"10px\" }}>\r\n                    {\" \"}\r\n                    Country Name:\r\n                    <Label.Detail>{country.name}</Label.Detail>\r\n                  </Label>\r\n                  <Label color=\"teal\" style={{ margin: \"10px\" }}>\r\n                    {\" \"}\r\n                    ISO Code:\r\n                    <Label.Detail>{country.cioc} </Label.Detail>\r\n                  </Label>\r\n                  <Label color=\"teal\" style={{ margin: \"10px\" }}>\r\n                    {\" \"}\r\n                    Capital City:\r\n                    <Label.Detail>{country.capital}</Label.Detail>\r\n                  </Label>\r\n                  <Label color=\"teal\" style={{ margin: \"10px\" }}>\r\n                    {\" \"}\r\n                    Population:\r\n                    <Label.Detail>{country.population}</Label.Detail>\r\n                  </Label>\r\n                  {country.languages.map((language) => (\r\n                    <Grid key={language.name}>\r\n                      <Label color=\"blue\" style={{ margin: \"10px\" }}>\r\n                        {\" \"}\r\n                        Language Name:\r\n                        <Label.Detail key={language.name} >{language.name}</Label.Detail>\r\n                      </Label>\r\n                      <Label color=\"blue\" style={{ margin: \"10px\" }}>\r\n                        {\" \"}\r\n                        Native Name:\r\n                        <Label.Detail key={language.name} >{language.nativeName} </Label.Detail>\r\n                      </Label>\r\n                      <Label color=\"blue\" style={{ margin: \"10px\" }}>\r\n                        {\" \"}\r\n                        Language ISO639_1:\r\n                        <Label.Detail key={language.name}>{language.iso639_1}</Label.Detail>\r\n                      </Label>\r\n                      <Label color=\"blue\" style={{ margin: \"10px\" }}>\r\n                        {\" \"}\r\n                        Language ISO639_1:\r\n                        <Label.Detail key={language.name}>{language.iso639_2}</Label.Detail>\r\n                      </Label>\r\n                    </Grid>\r\n                  ))}\r\n\r\n                  {country.currencies.map((currency) => (\r\n                    <Grid key={currency.name}>\r\n                      <Label color=\"yellow\" style={{ margin: \"10px\" }}>\r\n                        {\" \"}\r\n                        Currency Name:\r\n                        <Label.Detail key={currency.name}>{currency.name} </Label.Detail>\r\n                      </Label>\r\n                      <Label color=\"yellow\" style={{ margin: \"10px\" }}>\r\n                        {\" \"}\r\n                        Currency Code:\r\n                        <Label.Detail key={currency.name}>{currency.code}</Label.Detail>\r\n                      </Label>\r\n                      <Label color=\"yellow\" style={{ margin: \"10px\" }}>\r\n                        {\" \"}\r\n                        Currency Symbol:\r\n                        <Label.Detail key={currency.name}>{currency.symbol}</Label.Detail>\r\n                      </Label>\r\n                    </Grid>\r\n                  ))}\r\n                </Grid>\r\n              </Container>\r\n            </Modal.Description>\r\n          </Modal.Content>\r\n          <Modal.Actions>\r\n            <SimpleMap latlng={country.latlng} />\r\n          </Modal.Actions>\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ModalComponent;\r\n","import React, { Fragment } from \"react\";\r\nimport { Container } from \"semantic-ui-react\";\r\nimport ModalComponent from \"../../modals/ModalComponent\";\r\n\r\nconst CountriesListItem = (props) => {\r\n  return (\r\n    <Fragment>\r\n      <Container\r\n        style={{\r\n          width: \"200px\",\r\n          background: \"none\",\r\n          padding: \"25px\",\r\n          color: \"white\",\r\n        }}\r\n      >\r\n        <ModalComponent country={props.country} />\r\n\r\n        <h2 className=\"ts\">{props.country.name}</h2>\r\n      </Container>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default CountriesListItem;\r\n","import React, { Fragment } from \"react\";\r\nimport CountriesListItem from \"./CountriesListItem\";\r\nimport { Grid } from \"semantic-ui-react\";\r\n\r\nconst CountriesList = (props) => {\r\n  return (\r\n    <Fragment>\r\n      <Grid container centered>\r\n        {props.countries.map((country) => (\r\n          <CountriesListItem key={country.name} country={country} />\r\n        ))}\r\n      </Grid>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default CountriesList;\r\n","import  './SearchBoxStyles.css'\r\nimport React from 'react'\r\nimport { Input } from 'semantic-ui-react'\r\n\r\nconst SearchBoxComponent = ({placeholder, handleChange}) => {\r\n    return (\r\n        <Input \r\n        icon='search'\r\n        className='search'\r\n        type='search'\r\n        placeholder={placeholder}\r\n        onChange={handleChange}\r\n        />\r\n    )\r\n}\r\n \r\nexport default SearchBoxComponent\r\n","import React, { useState, useEffect } from \"react\";\r\nimport CountriesList from \"../countrieslist/CountriesList\";\r\nimport { Image, Grid } from \"semantic-ui-react\";\r\nimport SearchBoxComponent from \"../../SearchBox/SearchBoxComponent\";\r\nimport { connect } from \"react-redux\";\r\nimport fetchCountries from \"../../../store/actions/data/fetchCountries\";\r\n\r\nconst MapStateToProps = (state) => {\r\n  return {\r\n    countries: state.countries,\r\n  };\r\n};\r\n\r\nconst MapDispatchToProps = (dispatch) => {\r\n  return {\r\n    fetchCountries: () => dispatch(fetchCountries),\r\n  };\r\n};\r\n\r\nconst CountryDashboard = (props) => {\r\n  const [search, setSearch] = useState(\"\");\r\n  const [filteredCountries, setFilteredCountries] = useState([]);\r\n\r\n  useEffect(() => {\r\n    props.fetchCountries();\r\n  },[fetchCountries] );\r\n\r\n  useEffect(() => {\r\n    setFilteredCountries(\r\n      props.countries.filter((country) =>\r\n        country.name.toLowerCase().includes(search.toLowerCase())\r\n      )\r\n    );\r\n  }, [search, props.countries]);\r\n\r\n  return (\r\n    <div> \r\n      <Grid>\r\n        <Grid.Row centered>\r\n          <Image size=\"huge\" alt=\"World\" src=\"world.png\" />\r\n        </Grid.Row>\r\n        <Grid.Row centered>\r\n          <SearchBoxComponent\r\n            placeholder=\"Search Countries\"\r\n            handleChange={(e) => setSearch(e.target.value)}\r\n          />\r\n        </Grid.Row>\r\n        <Grid.Row>\r\n          <CountriesList countries={filteredCountries} />\r\n        </Grid.Row>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default connect(MapStateToProps, MapDispatchToProps)(CountryDashboard);\r\n","import React, { Fragment } from \"react\";\r\nimport { Container, Image, Icon, Menu } from \"semantic-ui-react\";\r\nimport CountryDashboard from \"../features/components/country/countryDashboard/CountryDashboard\";\r\n\r\nfunction App() {\r\n  const [darkMode, setDarkMode] = React.useState(getInitialMode());\r\n  React.useEffect(() => {\r\n    localStorage.setItem(\"dark\", JSON.stringify(darkMode));\r\n  }, [darkMode]);\r\n\r\n  function getInitialMode() {\r\n    const isReturningUser = \"dark\" in localStorage;\r\n    const savedMode = JSON.parse(localStorage.getItem(\"dark\"));\r\n    const userPrefersDark = getPrefColorScheme();\r\n\r\n    if (isReturningUser) {\r\n      return savedMode;\r\n    } else if (userPrefersDark) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  function getPrefColorScheme() {\r\n    if (!window.matchMedia) return;\r\n\r\n    return window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className={darkMode ? \"dark-mode\" : \"light-mode\"}>\r\n        <Menu secondary inverted fixed=\"top\">\r\n          <Container>\r\n            <Menu.Item position=\"left\">\r\n              <Icon name=\"world\" size=\"large\"/> \r\n              Countries Info\r\n            </Menu.Item>\r\n\r\n            <Menu.Item position=\"right\">\r\n              <Image size=\"mini\" src=\"sun.png\" />\r\n              <label className=\"switch\">\r\n                <input\r\n                  type=\"checkbox\"\r\n                  onChange={() => setDarkMode((prevMode) => !prevMode)}\r\n                />\r\n                <span className=\"slider round\"></span>\r\n              </label>\r\n              <Image size=\"mini\" src=\"moon.png\" />\r\n            </Menu.Item>\r\n          </Container>\r\n        </Menu>\r\n        <Container>\r\n          <CountryDashboard />\r\n        </Container>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const { FETCH_COUNTRIES } = require(\"../actions/data/fetchCountries\");\r\n\r\nconst countriesReducer = (state = {}, {type, payload}) => {\r\n    switch(type){\r\n        case FETCH_COUNTRIES:\r\n            return payload\r\n        default:\r\n            return state\r\n    }\r\n}; \r\n\r\nexport default countriesReducer","import { combineReducers, compose, createStore, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport countriesReducer from \"./reducers/countriesReducer\";\r\n\r\nconst reducer = combineReducers({\r\n  countries: countriesReducer,\r\n});\r\n\r\nconst middlewares = [thunk];\r\n\r\nconst initialState = {\r\n  countries: [],\r\n};\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst store = createStore(\r\n  reducer,\r\n  initialState,\r\n  composeEnhancers(applyMiddleware(...middlewares))\r\n);\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./app/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport store from \"./features/store\";\n\nconst rootEl = document.getElementById(\"root\");\n\nlet render = () => {\n  ReactDOM.render(\n    <Provider store={store}>\n      <App />\n    </Provider>,\n    rootEl\n  );\n};\n\nif (module.hot) {\n  module.hot.accept(\"./app/App\", () => {\n    setTimeout(render);\n  });\n}\n\nrender();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export const FETCH_COUNTRIES = 'FETCH_COUNTRIES';\r\n\r\n\r\nconst fetchCountries = (dispatch) => {\r\n    //fetch\r\n    fetch('https://restcountries.eu/rest/v2/all')\r\n    .then(res => res.json())\r\n    .then(res => dispatch({type:FETCH_COUNTRIES, payload: res}))\r\n    .catch(error => console.log(error))\r\n} \r\n\r\nexport default fetchCountries"],"sourceRoot":""}